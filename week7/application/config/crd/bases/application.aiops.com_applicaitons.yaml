---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.1
  name: applicaitons.application.aiops.com
spec:
  group: application.aiops.com
  names:
    kind: Applicaiton
    listKind: ApplicaitonList
    plural: applicaitons
    singular: applicaiton
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Applicaiton is the Schema for the applicaitons API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ApplicaitonSpec defines the desired state of Applicaiton
            properties:
              configMap:
                description: ConfigMap holds configuration data for pods to consume.
                properties:
                  apiVersion:
                    description: |-
                      APIVersion defines the versioned schema of this representation of an object.
                      Servers should convert recognized schemas to the latest internal value, and
                      may reject unrecognized values.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                    type: string
                  binaryData:
                    additionalProperties:
                      format: byte
                      type: string
                    description: |-
                      BinaryData contains the binary data.
                      Each key must consist of alphanumeric characters, '-', '_' or '.'.
                      BinaryData can contain byte sequences that are not in the UTF-8 range.
                      The keys stored in BinaryData must not overlap with the ones in
                      the Data field, this is enforced during validation process.
                      Using this field will require 1.10+ apiserver and
                      kubelet.
                    type: object
                  data:
                    additionalProperties:
                      type: string
                    description: |-
                      Data contains the configuration data.
                      Each key must consist of alphanumeric characters, '-', '_' or '.'.
                      Values with non-UTF-8 byte sequences must use the BinaryData field.
                      The keys stored in Data must not overlap with the keys in
                      the BinaryData field, this is enforced during validation process.
                    type: object
                  immutable:
                    description: |-
                      Immutable, if set to true, ensures that data stored in the ConfigMap cannot
                      be updated (only object metadata can be modified).
                      If not set to true, the field can be modified at any time.
                      Defaulted to nil.
                    type: boolean
                  kind:
                    description: |-
                      Kind is a string value representing the REST resource this object represents.
                      Servers may infer this from the endpoint the client submits requests to.
                      Cannot be updated.
                      In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    type: string
                  metadata:
                    description: |-
                      Standard object's metadata.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                    type: object
                type: object
              deployment:
                properties:
                  image:
                    type: string
                  port:
                    format: int32
                    type: integer
                  replicas:
                    format: int32
                    type: integer
                required:
                - image
                - port
                - replicas
                type: object
              ingress:
                description: IngressSpec describes the Ingress the user wishes to
                  exist.
                properties:
                  defaultBackend:
                    description: |-
                      defaultBackend is the backend that should handle requests that don't
                      match any rule. If Rules are not specified, DefaultBackend must be specified.
                      If DefaultBackend is not set, the handling of requests that do not match any
                      of the rules will be up to the Ingress controller.
                    properties:
                      resource:
                        description: |-
                          resource is an ObjectRef to another Kubernetes resource in the namespace
                          of the Ingress object. If resource is specified, a service.Name and
                          service.Port must not be specified.
                          This is a mutually exclusive setting with "Service".
                        properties:
                          apiGroup:
                            description: |-
                              APIGroup is the group for the resource being referenced.
                              If APIGroup is not specified, the specified Kind must be in the core API group.
                              For any other third-party types, APIGroup is required.
                            type: string
                          kind:
                            description: Kind is the type of resource being referenced
                            type: string
                          name:
                            description: Name is the name of resource being referenced
                            type: string
                        required:
                        - kind
                        - name
                        type: object
                        x-kubernetes-map-type: atomic
                      service:
                        description: |-
                          service references a service as a backend.
                          This is a mutually exclusive setting with "Resource".
                        properties:
                          name:
                            description: |-
                              name is the referenced service. The service must exist in
                              the same namespace as the Ingress object.
                            type: string
                          port:
                            description: |-
                              port of the referenced service. A port name or port number
                              is required for a IngressServiceBackend.
                            properties:
                              name:
                                description: |-
                                  name is the name of the port on the Service.
                                  This is a mutually exclusive setting with "Number".
                                type: string
                              number:
                                description: |-
                                  number is the numerical port number (e.g. 80) on the Service.
                                  This is a mutually exclusive setting with "Name".
                                format: int32
                                type: integer
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                        - name
                        type: object
                    type: object
                  ingressClassName:
                    description: |-
                      ingressClassName is the name of an IngressClass cluster resource. Ingress
                      controller implementations use this field to know whether they should be
                      serving this Ingress resource, by a transitive connection
                      (controller -> IngressClass -> Ingress resource). Although the
                      `kubernetes.io/ingress.class` annotation (simple constant name) was never
                      formally defined, it was widely supported by Ingress controllers to create
                      a direct binding between Ingress controller and Ingress resources. Newly
                      created Ingress resources should prefer using the field. However, even
                      though the annotation is officially deprecated, for backwards compatibility
                      reasons, ingress controllers should still honor that annotation if present.
                    type: string
                  rules:
                    description: |-
                      rules is a list of host rules used to configure the Ingress. If unspecified,
                      or no rule matches, all traffic is sent to the default backend.
                    items:
                      description: |-
                        IngressRule represents the rules mapping the paths under a specified host to
                        the related backend services. Incoming requests are first evaluated for a host
                        match, then routed to the backend associated with the matching IngressRuleValue.
                      properties:
                        host:
                          description: "host is the fully qualified domain name of
                            a network host, as defined by RFC 3986.\nNote the following
                            deviations from the \"host\" part of the\nURI as defined
                            in RFC 3986:\n1. IPs are not allowed. Currently an IngressRuleValue
                            can only apply to\n   the IP in the Spec of the parent
                            Ingress.\n2. The `:` delimiter is not respected because
                            ports are not allowed.\n\t  Currently the port of an Ingress
                            is implicitly :80 for http and\n\t  :443 for https.\nBoth
                            these may change in the future.\nIncoming requests are
                            matched against the host before the\nIngressRuleValue.
                            If the host is unspecified, the Ingress routes all\ntraffic
                            based on the specified IngressRuleValue.\n\nhost can be
                            \"precise\" which is a domain name without the terminating
                            dot of\na network host (e.g. \"foo.bar.com\") or \"wildcard\",
                            which is a domain name\nprefixed with a single wildcard
                            label (e.g. \"*.foo.com\").\nThe wildcard character '*'
                            must appear by itself as the first DNS label and\nmatches
                            only a single label. You cannot have a wildcard label
                            by itself (e.g. Host == \"*\").\nRequests will be matched
                            against the Host field in the following way:\n1. If host
                            is precise, the request matches this rule if the http
                            host header is equal to Host.\n2. If host is a wildcard,
                            then the request matches this rule if the http host header\nis
                            to equal to the suffix (removing the first label) of the
                            wildcard rule."
                          type: string
                        http:
                          description: |-
                            HTTPIngressRuleValue is a list of http selectors pointing to backends.
                            In the example: http://<host>/<path>?<searchpart> -> backend where
                            where parts of the url correspond to RFC 3986, this resource will be used
                            to match against everything after the last '/' and before the first '?'
                            or '#'.
                          properties:
                            paths:
                              description: paths is a collection of paths that map
                                requests to backends.
                              items:
                                description: |-
                                  HTTPIngressPath associates a path with a backend. Incoming urls matching the
                                  path are forwarded to the backend.
                                properties:
                                  backend:
                                    description: |-
                                      backend defines the referenced service endpoint to which the traffic
                                      will be forwarded to.
                                    properties:
                                      resource:
                                        description: |-
                                          resource is an ObjectRef to another Kubernetes resource in the namespace
                                          of the Ingress object. If resource is specified, a service.Name and
                                          service.Port must not be specified.
                                          This is a mutually exclusive setting with "Service".
                                        properties:
                                          apiGroup:
                                            description: |-
                                              APIGroup is the group for the resource being referenced.
                                              If APIGroup is not specified, the specified Kind must be in the core API group.
                                              For any other third-party types, APIGroup is required.
                                            type: string
                                          kind:
                                            description: Kind is the type of resource
                                              being referenced
                                            type: string
                                          name:
                                            description: Name is the name of resource
                                              being referenced
                                            type: string
                                        required:
                                        - kind
                                        - name
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      service:
                                        description: |-
                                          service references a service as a backend.
                                          This is a mutually exclusive setting with "Resource".
                                        properties:
                                          name:
                                            description: |-
                                              name is the referenced service. The service must exist in
                                              the same namespace as the Ingress object.
                                            type: string
                                          port:
                                            description: |-
                                              port of the referenced service. A port name or port number
                                              is required for a IngressServiceBackend.
                                            properties:
                                              name:
                                                description: |-
                                                  name is the name of the port on the Service.
                                                  This is a mutually exclusive setting with "Number".
                                                type: string
                                              number:
                                                description: |-
                                                  number is the numerical port number (e.g. 80) on the Service.
                                                  This is a mutually exclusive setting with "Name".
                                                format: int32
                                                type: integer
                                            type: object
                                            x-kubernetes-map-type: atomic
                                        required:
                                        - name
                                        type: object
                                    type: object
                                  path:
                                    description: |-
                                      path is matched against the path of an incoming request. Currently it can
                                      contain characters disallowed from the conventional "path" part of a URL
                                      as defined by RFC 3986. Paths must begin with a '/' and must be present
                                      when using PathType with value "Exact" or "Prefix".
                                    type: string
                                  pathType:
                                    description: |-
                                      pathType determines the interpretation of the path matching. PathType can
                                      be one of the following values:
                                      * Exact: Matches the URL path exactly.
                                      * Prefix: Matches based on a URL path prefix split by '/'. Matching is
                                        done on a path element by element basis. A path element refers is the
                                        list of labels in the path split by the '/' separator. A request is a
                                        match for path p if every p is an element-wise prefix of p of the
                                        request path. Note that if the last element of the path is a substring
                                        of the last element in request path, it is not a match (e.g. /foo/bar
                                        matches /foo/bar/baz, but does not match /foo/barbaz).
                                      * ImplementationSpecific: Interpretation of the Path matching is up to
                                        the IngressClass. Implementations can treat this as a separate PathType
                                        or treat it identically to Prefix or Exact path types.
                                      Implementations are required to support all path types.
                                    type: string
                                required:
                                - backend
                                - pathType
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          required:
                          - paths
                          type: object
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                  tls:
                    description: |-
                      tls represents the TLS configuration. Currently the Ingress only supports a
                      single TLS port, 443. If multiple members of this list specify different hosts,
                      they will be multiplexed on the same port according to the hostname specified
                      through the SNI TLS extension, if the ingress controller fulfilling the
                      ingress supports SNI.
                    items:
                      description: IngressTLS describes the transport layer security
                        associated with an ingress.
                      properties:
                        hosts:
                          description: |-
                            hosts is a list of hosts included in the TLS certificate. The values in
                            this list must match the name/s used in the tlsSecret. Defaults to the
                            wildcard host setting for the loadbalancer controller fulfilling this
                            Ingress, if left unspecified.
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        secretName:
                          description: |-
                            secretName is the name of the secret used to terminate TLS traffic on
                            port 443. Field is left optional to allow TLS routing based on SNI
                            hostname alone. If the SNI host in a listener conflicts with the "Host"
                            header field used by an IngressRule, the SNI host is used for termination
                            and value of the "Host" header is used for routing.
                          type: string
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                type: object
              service:
                description: ServiceSpec describes the attributes that a user creates
                  on a service.
                properties:
                  allocateLoadBalancerNodePorts:
                    description: |-
                      allocateLoadBalancerNodePorts defines if NodePorts will be automatically
                      allocated for services with type LoadBalancer.  Default is "true". It
                      may be set to "false" if the cluster load-balancer does not rely on
                      NodePorts.  If the caller requests specific NodePorts (by specifying a
                      value), those requests will be respected, regardless of this field.
                      This field may only be set for services with type LoadBalancer and will
                      be cleared if the type is changed to any other type.
                    type: boolean
                  clusterIP:
                    description: |-
                      clusterIP is the IP address of the service and is usually assigned
                      randomly. If an address is specified manually, is in-range (as per
                      system configuration), and is not in use, it will be allocated to the
                      service; otherwise creation of the service will fail. This field may not
                      be changed through updates unless the type field is also being changed
                      to ExternalName (which requires this field to be blank) or the type
                      field is being changed from ExternalName (in which case this field may
                      optionally be specified, as describe above).  Valid values are "None",
                      empty string (""), or a valid IP address. Setting this to "None" makes a
                      "headless service" (no virtual IP), which is useful when direct endpoint
                      connections are preferred and proxying is not required.  Only applies to
                      types ClusterIP, NodePort, and LoadBalancer. If this field is specified
                      when creating a Service of type ExternalName, creation will fail. This
                      field will be wiped when updating a Service to type ExternalName.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    type: string
                  clusterIPs:
                    description: |-
                      ClusterIPs is a list of IP addresses assigned to this service, and are
                      usually assigned randomly.  If an address is specified manually, is
                      in-range (as per system configuration), and is not in use, it will be
                      allocated to the service; otherwise creation of the service will fail.
                      This field may not be changed through updates unless the type field is
                      also being changed to ExternalName (which requires this field to be
                      empty) or the type field is being changed from ExternalName (in which
                      case this field may optionally be specified, as describe above).  Valid
                      values are "None", empty string (""), or a valid IP address.  Setting
                      this to "None" makes a "headless service" (no virtual IP), which is
                      useful when direct endpoint connections are preferred and proxying is
                      not required.  Only applies to types ClusterIP, NodePort, and
                      LoadBalancer. If this field is specified when creating a Service of type
                      ExternalName, creation will fail. This field will be wiped when updating
                      a Service to type ExternalName.  If this field is not specified, it will
                      be initialized from the clusterIP field.  If this field is specified,
                      clients must ensure that clusterIPs[0] and clusterIP have the same
                      value.

                      This field may hold a maximum of two entries (dual-stack IPs, in either order).
                      These IPs must correspond to the values of the ipFamilies field. Both
                      clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                  externalIPs:
                    description: |-
                      externalIPs is a list of IP addresses for which nodes in the cluster
                      will also accept traffic for this service.  These IPs are not managed by
                      Kubernetes.  The user is responsible for ensuring that traffic arrives
                      at a node with this IP.  A common example is external load-balancers
                      that are not part of the Kubernetes system.
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                  externalName:
                    description: |-
                      externalName is the external reference that discovery mechanisms will
                      return as an alias for this service (e.g. a DNS CNAME record). No
                      proxying will be involved.  Must be a lowercase RFC-1123 hostname
                      (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                    type: string
                  externalTrafficPolicy:
                    description: |-
                      externalTrafficPolicy describes how nodes distribute service traffic they
                      receive on one of the Service's "externally-facing" addresses (NodePorts,
                      ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
                      the service in a way that assumes that external load balancers will take care
                      of balancing the service traffic between nodes, and so each node will deliver
                      traffic only to the node-local endpoints of the service, without masquerading
                      the client source IP. (Traffic mistakenly sent to a node with no endpoints will
                      be dropped.) The default value, "Cluster", uses the standard behavior of
                      routing to all endpoints evenly (possibly modified by topology and other
                      features). Note that traffic sent to an External IP or LoadBalancer IP from
                      within the cluster will always get "Cluster" semantics, but clients sending to
                      a NodePort from within the cluster may need to take traffic policy into account
                      when picking a node.
                    type: string
                  healthCheckNodePort:
                    description: |-
                      healthCheckNodePort specifies the healthcheck nodePort for the service.
                      This only applies when type is set to LoadBalancer and
                      externalTrafficPolicy is set to Local. If a value is specified, is
                      in-range, and is not in use, it will be used.  If not specified, a value
                      will be automatically allocated.  External systems (e.g. load-balancers)
                      can use this port to determine if a given node holds endpoints for this
                      service or not.  If this field is specified when creating a Service
                      which does not need it, creation will fail. This field will be wiped
                      when updating a Service to no longer need it (e.g. changing type).
                      This field cannot be updated once set.
                    format: int32
                    type: integer
                  internalTrafficPolicy:
                    description: |-
                      InternalTrafficPolicy describes how nodes distribute service traffic they
                      receive on the ClusterIP. If set to "Local", the proxy will assume that pods
                      only want to talk to endpoints of the service on the same node as the pod,
                      dropping the traffic if there are no local endpoints. The default value,
                      "Cluster", uses the standard behavior of routing to all endpoints evenly
                      (possibly modified by topology and other features).
                    type: string
                  ipFamilies:
                    description: |-
                      IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
                      service. This field is usually assigned automatically based on cluster
                      configuration and the ipFamilyPolicy field. If this field is specified
                      manually, the requested family is available in the cluster,
                      and ipFamilyPolicy allows it, it will be used; otherwise creation of
                      the service will fail. This field is conditionally mutable: it allows
                      for adding or removing a secondary IP family, but it does not allow
                      changing the primary IP family of the Service. Valid values are "IPv4"
                      and "IPv6".  This field only applies to Services of types ClusterIP,
                      NodePort, and LoadBalancer, and does apply to "headless" services.
                      This field will be wiped when updating a Service to type ExternalName.

                      This field may hold a maximum of two entries (dual-stack families, in
                      either order).  These families must correspond to the values of the
                      clusterIPs field, if specified. Both clusterIPs and ipFamilies are
                      governed by the ipFamilyPolicy field.
                    items:
                      description: |-
                        IPFamily represents the IP Family (IPv4 or IPv6). This type is used
                        to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                  ipFamilyPolicy:
                    description: |-
                      IPFamilyPolicy represents the dual-stack-ness requested or required by
                      this Service. If there is no value provided, then this field will be set
                      to SingleStack. Services can be "SingleStack" (a single IP family),
                      "PreferDualStack" (two IP families on dual-stack configured clusters or
                      a single IP family on single-stack clusters), or "RequireDualStack"
                      (two IP families on dual-stack configured clusters, otherwise fail). The
                      ipFamilies and clusterIPs fields depend on the value of this field. This
                      field will be wiped when updating a service to type ExternalName.
                    type: string
                  loadBalancerClass:
                    description: |-
                      loadBalancerClass is the class of the load balancer implementation this Service belongs to.
                      If specified, the value of this field must be a label-style identifier, with an optional prefix,
                      e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
                      This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
                      balancer implementation is used, today this is typically done through the cloud provider integration,
                      but should apply for any default implementation. If set, it is assumed that a load balancer
                      implementation is watching for Services with a matching class. Any default load balancer
                      implementation (e.g. cloud providers) should ignore Services that set this field.
                      This field can only be set when creating or updating a Service to type 'LoadBalancer'.
                      Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
                    type: string
                  loadBalancerIP:
                    description: |-
                      Only applies to Service Type: LoadBalancer.
                      This feature depends on whether the underlying cloud-provider supports specifying
                      the loadBalancerIP when a load balancer is created.
                      This field will be ignored if the cloud-provider does not support the feature.
                      Deprecated: This field was under-specified and its meaning varies across implementations.
                      Using it is non-portable and it may not support dual-stack.
                      Users are encouraged to use implementation-specific annotations when available.
                    type: string
                  loadBalancerSourceRanges:
                    description: |-
                      If specified and supported by the platform, this will restrict traffic through the cloud-provider
                      load-balancer will be restricted to the specified client IPs. This field will be ignored if the
                      cloud-provider does not support the feature."
                      More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                  ports:
                    description: |-
                      The list of ports that are exposed by this service.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    items:
                      description: ServicePort contains information on service's port.
                      properties:
                        appProtocol:
                          description: |-
                            The application protocol for this port.
                            This is used as a hint for implementations to offer richer behavior for protocols that they understand.
                            This field follows standard Kubernetes label syntax.
                            Valid values are either:

                            * Un-prefixed protocol names - reserved for IANA standard service names (as per
                            RFC-6335 and https://www.iana.org/assignments/service-names).

                            * Kubernetes-defined prefixed names:
                              * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
                              * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
                              * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

                            * Other protocols should use implementation-defined prefixed names such as
                            mycompany.com/my-custom-protocol.
                          type: string
                        name:
                          description: |-
                            The name of this port within the service. This must be a DNS_LABEL.
                            All ports within a ServiceSpec must have unique names. When considering
                            the endpoints for a Service, this must match the 'name' field in the
                            EndpointPort.
                            Optional if only one ServicePort is defined on this service.
                          type: string
                        nodePort:
                          description: |-
                            The port on each node on which this service is exposed when type is
                            NodePort or LoadBalancer.  Usually assigned by the system. If a value is
                            specified, in-range, and not in use it will be used, otherwise the
                            operation will fail.  If not specified, a port will be allocated if this
                            Service requires one.  If this field is specified when creating a
                            Service which does not need it, creation will fail. This field will be
                            wiped when updating a Service to no longer need it (e.g. changing type
                            from NodePort to ClusterIP).
                            More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                          format: int32
                          type: integer
                        port:
                          description: The port that will be exposed by this service.
                          format: int32
                          type: integer
                        protocol:
                          default: TCP
                          description: |-
                            The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
                            Default is TCP.
                          type: string
                        targetPort:
                          anyOf:
                          - type: integer
                          - type: string
                          description: |-
                            Number or name of the port to access on the pods targeted by the service.
                            Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                            If this is a string, it will be looked up as a named port in the
                            target Pod's container ports. If this is not specified, the value
                            of the 'port' field is used (an identity map).
                            This field is ignored for services with clusterIP=None, and should be
                            omitted or set equal to the 'port' field.
                            More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                          x-kubernetes-int-or-string: true
                      required:
                      - port
                      type: object
                    type: array
                    x-kubernetes-list-map-keys:
                    - port
                    - protocol
                    x-kubernetes-list-type: map
                  publishNotReadyAddresses:
                    description: |-
                      publishNotReadyAddresses indicates that any agent which deals with endpoints for this
                      Service should disregard any indications of ready/not-ready.
                      The primary use case for setting this field is for a StatefulSet's Headless Service to
                      propagate SRV DNS records for its Pods for the purpose of peer discovery.
                      The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
                      Services interpret this to mean that all endpoints are considered "ready" even if the
                      Pods themselves are not. Agents which consume only Kubernetes generated endpoints
                      through the Endpoints or EndpointSlice resources can safely assume this behavior.
                    type: boolean
                  selector:
                    additionalProperties:
                      type: string
                    description: |-
                      Route service traffic to pods with label keys and values matching this
                      selector. If empty or not present, the service is assumed to have an
                      external process managing its endpoints, which Kubernetes will not
                      modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
                      Ignored if type is ExternalName.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/
                    type: object
                    x-kubernetes-map-type: atomic
                  sessionAffinity:
                    description: |-
                      Supports "ClientIP" and "None". Used to maintain session affinity.
                      Enable client IP based session affinity.
                      Must be ClientIP or None.
                      Defaults to None.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    type: string
                  sessionAffinityConfig:
                    description: sessionAffinityConfig contains the configurations
                      of session affinity.
                    properties:
                      clientIP:
                        description: clientIP contains the configurations of Client
                          IP based session affinity.
                        properties:
                          timeoutSeconds:
                            description: |-
                              timeoutSeconds specifies the seconds of ClientIP type session sticky time.
                              The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
                              Default value is 10800(for 3 hours).
                            format: int32
                            type: integer
                        type: object
                    type: object
                  trafficDistribution:
                    description: |-
                      TrafficDistribution offers a way to express preferences for how traffic is
                      distributed to Service endpoints. Implementations can use this field as a
                      hint, but are not required to guarantee strict adherence. If the field is
                      not set, the implementation will apply its default routing strategy. If set
                      to "PreferClose", implementations should prioritize endpoints that are
                      topologically close (e.g., same zone).
                      This is an alpha field and requires enabling ServiceTrafficDistribution feature.
                    type: string
                  type:
                    description: |-
                      type determines how the Service is exposed. Defaults to ClusterIP. Valid
                      options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
                      "ClusterIP" allocates a cluster-internal IP address for load-balancing
                      to endpoints. Endpoints are determined by the selector or if that is not
                      specified, by manual construction of an Endpoints object or
                      EndpointSlice objects. If clusterIP is "None", no virtual IP is
                      allocated and the endpoints are published as a set of endpoints rather
                      than a virtual IP.
                      "NodePort" builds on ClusterIP and allocates a port on every node which
                      routes to the same endpoints as the clusterIP.
                      "LoadBalancer" builds on NodePort and creates an external load-balancer
                      (if supported in the current cloud) which routes to the same endpoints
                      as the clusterIP.
                      "ExternalName" aliases this service to the specified externalName.
                      Several other fields do not apply to ExternalName services.
                      More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                    type: string
                type: object
            required:
            - configMap
            - deployment
            - ingress
            - service
            type: object
          status:
            description: ApplicaitonStatus defines the observed state of Applicaiton
            properties:
              availableReplicas:
                format: int32
                type: integer
            required:
            - availableReplicas
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
